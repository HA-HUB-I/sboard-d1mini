# Wiring Plan
# Door Contact (D_IN on Sboard III) → Connect to a GPIO on the D1 Mini (e.g., GPIO14 or D5).
# Exit Button (OPEN on Sboard III) → Connect to a GPIO on the D1 Mini (e.g., GPIO12 or D6).
# Alarm (ALARM- on Sboard III) → Connect to a GPIO on the D1 Mini (e.g., GPIO13 or D7).
# Buzzer Control (BZ on Sboard III) → Connect to a GPIO on the D1 Mini (e.g., GPIO5 or D1).
# Intercom Opto D2	GPIO4 (HIGH/LOW)


esphome:
  name: d1mini
  friendly_name: D1mini-Sboard

esp8266:
  board: d1_mini

# Enable logging
logger:
  baud_rate: 0


      
# Enable Home Assistant API
api:
  encryption:
    key: "SecretKey1234567890"  # Replace with your actual encryption key

ota:
  platform: esphome


wifi:
  ssid: !secret door_ssid
  password: !secret door_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "D1 Fallback"
    password: "fallback_password"  # Replace with your actual fallback password

captive_portal:

text_sensor:
    - platform: template #rfid posleden skaniran tag
      name: last_tag
      id: rfid_tag
      
    - platform: template
      name: Last User
      id: last_user
      icon: mdi:clock-start 

sensor:
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s

  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor

  - platform: template
    name: "Uptime in Seconds"
    lambda: |-
      return id(uptime_sensor).state;
    unit_of_measurement: "s"
    update_interval: 60s

  - platform: template
    name: "Uptime in Minutes"
    lambda: |-
      return id(uptime_sensor).state / 60;
    unit_of_measurement: "min"
    update_interval: 60s


wiegand:
  - id: mykeypad
    d0: GPIO3 # RX #GREEN TO TX 
    d1: GPIO1 # TX #WHITE TO RX
    on_tag:
      - lambda: ESP_LOGI("TAG", "received tag %s", x.c_str());
      - homeassistant.tag_scanned: !lambda 'return x.c_str();'
             


# Door Contact Sensor
binary_sensor:
  - platform: gpio
    pin:
      number: D5
      mode: INPUT_PULLUP
    name: "Door Contact"
    device_class: door
    on_press:
      then:
        - logger.log: "Door Opened"
    on_release:
      then:
        - logger.log: "Door Closed"

  - platform: gpio
    pin:
      number: D7
      mode: INPUT_PULLUP  # Keeps it HIGH when inactive
    name: "Alarm Triggered"
    device_class: safety
    filters:
      - invert:  # Since it's active LOW, invert the signal
    on_press:
      then:
        - logger.log: "⚠️ Alarm Activated!"
    on_release:
      then:
        - logger.log: "✅ Alarm Cleared"

  # Status LED (Optional)
  - platform: status
    name: "ESP Status" 
        

  - platform: gpio
    pin: GPIO2
    name: "Домофон отключване"
    device_class: door
    filters:
      - invert:
      - delayed_on: 10ms
      - delayed_off: 10ms
      
# Buzzer Control
switch:
  - platform: gpio
    pin: D1
    name: "Buzzer"
    restore_mode: ALWAYS_OFF
    icon: "mdi:alarm-bell"

# Exit button
  - platform: gpio
    pin:
      number: D6
      mode: OUTPUT_OPEN_DRAIN
      inverted: yes  # Ensures it sends LOW when activated
    name: "Exit Button"
    icon: "mdi:exit-run"
    on_turn_on:
      - delay: 1s  # Keeps it LOW for 1 second
      - switch.turn_off: exit_button
    id: exit_button




  
        
         